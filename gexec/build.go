// untested sections: 5

package gexec

import (
	"go/build"
	"io/ioutil"
	"os"
	"sync"

	"github.com/onsi/gomega/gexec/gopackage"
	"github.com/onsi/gomega/gexec/gotestpackage"
)

var (
	mu     sync.Mutex
	tmpDir string
)

type GoPackage interface {
	Build(args ...string) (string, error)
	BuildWithEnvironment(envs []string, args ...string) (string, error)
	BuildIn(gopath string, args ...string) (string, error)
}

func Get(packageName string) (GoPackage, error) {
	tmpDir, err := temporaryDirectory()
	if err != nil {
		return nil, err
	}

	return gopackage.Get(tmpDir, packageName), nil
}

func GetTests(packagePath string) (GoPackage, error) {
	tmpDir, err := temporaryDirectory()
	if err != nil {
		return nil, err
	}

	return gotestpackage.Get(tmpDir, build.Default.GOPATH, packagePath, nil)
}

func GetTestsWithEnvironment(envs []string, packagePath string) (GoPackage, error) {
	tmpDir, err := temporaryDirectory()
	if err != nil {
		return nil, err
	}

	return gotestpackage.Get(tmpDir, build.Default.GOPATH, packagePath, envs)
}

func GetTestsIn(gopath, packagePath string) (GoPackage, error) {
	tmpDir, err := temporaryDirectory()
	if err != nil {
		return nil, err
	}

	return gotestpackage.Get(tmpDir, gopath, packagePath, nil)
}

/*
You should call CleanupBuildArtifacts before your test ends to clean up any temporary artifacts generated by
gexec. In Ginkgo this is typically done in an AfterSuite callback.
*/
func CleanupBuildArtifacts() {
	mu.Lock()
	defer mu.Unlock()
	if tmpDir != "" {
		os.RemoveAll(tmpDir)
		tmpDir = ""
	}
}

func temporaryDirectory() (string, error) {
	var err error
	mu.Lock()
	defer mu.Unlock()
	if tmpDir == "" {
		tmpDir, err = ioutil.TempDir("", "gexec_artifacts")
		if err != nil {
			return "", err
		}
	}

	return ioutil.TempDir(tmpDir, "g")
}
